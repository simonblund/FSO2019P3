{"version":3,"sources":["components/Form.js","services/contactService.js","components/List.js","components/Search.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Input","_ref2","onChange","text","value","react_default","a","createElement","Form","_ref","handleChange","action","newVariables","onSubmit","Form_Input","name","number","type","baseUrl","contactService","axios","get","then","response","data","newObject","post","id","put","concat","delete","status","Person","person","onact","onClick","List","persons","deletePerson","event","identifier","target","window","confirm","find","i","location","reload","map","List_Person","key","Search","Notification","message","className","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","filterPersons","setFilterPersons","_useState5","_useState6","newName","setNewName","_useState7","_useState8","newPhone","setNewPhone","_useState9","_useState10","errorMessage","setErrorMessage","useEffect","components_Notification","components_Search","filter","toLowerCase","indexOf","components_Form","preventDefault","personObj","changee","catch","error","fp","setTimeout","console","log","components_List","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d562bf14.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({handleChange, action, newVariables})=> {\n    return(\n        <form onSubmit={action}>\n            <Input onChange={handleChange.name} text=\"name\" value={newVariables.name}/>\n            <Input onChange={handleChange.number} text=\"phone\" value={newVariables.number}/>\n            <div>\n            <button type=\"submit\">add</button>\n            </div>\n        </form>  \n    )\n}\n\nconst Input = ({onChange, text, value}) =>{\n\n    return(\n        <div>\n            {text}: <input onChange={onChange} value={value}/>\n            \n            </div>\n    )\n}\n\nexport default Form;","import axios from 'axios'\nconst baseUrl = \"https://stormy-headland-54781.herokuapp.com/api/persons\"\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n\n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  const deletePerson = (id) => {\n      const request = axios.delete(`${baseUrl}/${id}`)\n      return request.then(response => response.status)\n  }\n\nexport default { \n    getAll: getAll, \n    create: create, \n    update: update, \n    deletePerson :deletePerson\n  }","import React from 'react';\nimport contactService from '../services/contactService';\n\nconst List = ({persons})=> {\n\n    const deletePerson = (event) =>{\n        const identifier = event.target.value\n        const deleteconfirm = window.confirm(\"Are you sure you want to delete \"+persons.find(i => i.id === identifier ).name+\"?\")\n         if(deleteconfirm){\n             contactService.deletePerson(event.target.value)\n             window.location.reload()\n         }\n     }\n    const rows = () => persons.map(person =>\n        <Person person={person} key={person.name} onact={deletePerson}/>\n      )\n    return(\n        <div>\n            \n            <ul>\n                {rows()}\n            </ul>\n        </div>\n    )\n}\n\nconst Person = ({person,onact}) =>{\n    \n    \n    return(\n        <li>{person.name} - {person.number} <button onClick={onact} value={person.id}>Delete</button></li>\n    )\n\n}\n\nexport default List;","import React from 'react';\n\nconst Search = ({onChange})=> {\n\n    return(\n        <div>\n            Search: <input onChange={onChange} />\n            </div>\n    )\n}\n\nexport default Search;","import React from 'react';\n\nconst Notification = ({message})=> {\n    if (message === null) {\n        return null\n      }\n    \n    return(\n        <div className={message.type}>\n            <p>{message.message}</p>\n        </div>\n    )\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form'\nimport List from './components/List'\nimport Search from './components/Search'\nimport Notification from './components/Notification'\nimport './App.css';\nimport contactService from './services/contactService'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [filterPersons, setFilterPersons] = useState(persons);\n  const [newName, setNewName] = useState('')\n  const [newPhone, setNewPhone] = useState('')\n  const [errorMessage, setErrorMessage] = useState({})\n\n\n  const personHook = () => {\n    contactService\n      .getAll()\n      .then(response => {\n        setPersons(response)\n        setFilterPersons(response)\n      })\n\n  }\n  useEffect(personHook, [])\n\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value)\n  }\n\n  const handleFilter = (event) => {\n    setFilterPersons(persons.filter(person => person.name.toLowerCase().indexOf(event.target.value.toLowerCase()) !== -1))\n  }\n\n  // Add or edit persn\n  const addPerson = (event) => {\n    // prevent the form's default action\n    event.preventDefault()\n\n    // This is how the person object looks.\n    let personObj = {\n      name: newName,\n      number: newPhone\n    }\n    // If person with name exists, ask if you want to update that person instead.\n    if (persons.find(i => i.name === personObj.name)) {\n      const changeConf = window.confirm(newName + ' is already added to phonebook, would you like to change the number?')\n      // If you want to update the person\n      if (changeConf) {\n        const changee = persons.find(i => i.name === personObj.name)\n\n        // Update the person with the found id\n        contactService\n          .update(changee.id, personObj)\n          .catch(error => {\n            setFilterPersons(filterPersons.filter(fp => fp.id !== changee.id))\n            setErrorMessage(\n              {\n                type: 'error',\n                message: 'Update of ' + personObj.name + error+ ' failed'\n              }\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n        \n        changee.number = personObj.number\n\n        // If update succeeded notify\n        setErrorMessage(\n          {\n            type: 'success',\n            message: 'Person ' + personObj.name + ' was updated'\n          }\n\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      }\n    } else {\n      // If no person with name exists, create a new person\n      contactService\n        .create(personObj)\n        .then( response => {\n          personObj = response\n          setPersons(persons.concat(personObj))\n          setFilterPersons(filterPersons.concat(personObj))\n        })\n        .catch(error => {\n          // Catch errors on create\n          console.log('On create', error)\n          setErrorMessage(\n            {\n              type: 'error',\n              message: 'Creation of ' + personObj.name + ' failed'\n            }\n\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n\n      // On success notify\n      setErrorMessage(\n        {\n          type: 'success',\n          message: 'Person ' + personObj.name + ' was created'\n        }\n\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n    \n    setNewName('')\n    setNewPhone('')\n  }\n\n  let list = () => {\n    if (filterPersons !== null) {\n      return <List persons={filterPersons} />\n    } else {\n      return <p>No persons in list</p>\n    }\n  }\n\n  const handleChange = { name: handleNameChange, number: handlePhoneChange }\n  const newVariables = { name: newName, number: newPhone, }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage} />\n      <h2>Search</h2>\n      <Search onChange={handleFilter} />\n      <h2>Add new</h2>\n      <Form handleChange={handleChange} action={addPerson} newVariables={newVariables} />\n      <h2>List</h2>\n      {list()}\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}